//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PractWork20.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MarketEntities : DbContext
    {
        public MarketEntities()
            : base("name=MarketEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<OrderContent> OrderContents { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Producer> Producers { get; set; }
        public virtual DbSet<Product> Products { get; set; }
    
        [DbFunction("MarketEntities", "GetOrder")]
        public virtual IQueryable<GetOrder_Result> GetOrder(Nullable<int> idOrder)
        {
            var idOrderParameter = idOrder.HasValue ?
                new ObjectParameter("idOrder", idOrder) :
                new ObjectParameter("idOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetOrder_Result>("[MarketEntities].[GetOrder](@idOrder)", idOrderParameter);
        }
    
        public virtual int IncreasePrice(Nullable<decimal> markup, string type, ObjectParameter rowCount)
        {
            var markupParameter = markup.HasValue ?
                new ObjectParameter("markup", markup) :
                new ObjectParameter("markup", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncreasePrice", markupParameter, typeParameter, rowCount);
        }
    }
}
